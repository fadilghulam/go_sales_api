// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go_sales_api/internal/model"
)

func newPaymentType(db *gorm.DB, opts ...gen.DOOption) paymentType {
	_paymentType := paymentType{}

	_paymentType.paymentTypeDo.UseDB(db, opts...)
	_paymentType.paymentTypeDo.UseModel(&model.PaymentType{})

	tableName := _paymentType.paymentTypeDo.TableName()
	_paymentType.ALL = field.NewAsterisk(tableName)
	_paymentType.ID = field.NewInt64(tableName, "id")
	_paymentType.Name = field.NewString(tableName, "name")
	_paymentType.CreatedAt = field.NewTime(tableName, "created_at")
	_paymentType.UpdatedAt = field.NewTime(tableName, "updated_at")

	_paymentType.fillFieldMap()

	return _paymentType
}

type paymentType struct {
	paymentTypeDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (p paymentType) Table(newTableName string) *paymentType {
	p.paymentTypeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentType) As(alias string) *paymentType {
	p.paymentTypeDo.DO = *(p.paymentTypeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentType) updateTableName(table string) *paymentType {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.Name = field.NewString(table, "name")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *paymentType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentType) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p paymentType) clone(db *gorm.DB) paymentType {
	p.paymentTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentType) replaceDB(db *gorm.DB) paymentType {
	p.paymentTypeDo.ReplaceDB(db)
	return p
}

type paymentTypeDo struct{ gen.DO }

type IPaymentTypeDo interface {
	gen.SubQuery
	Debug() IPaymentTypeDo
	WithContext(ctx context.Context) IPaymentTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaymentTypeDo
	WriteDB() IPaymentTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaymentTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaymentTypeDo
	Not(conds ...gen.Condition) IPaymentTypeDo
	Or(conds ...gen.Condition) IPaymentTypeDo
	Select(conds ...field.Expr) IPaymentTypeDo
	Where(conds ...gen.Condition) IPaymentTypeDo
	Order(conds ...field.Expr) IPaymentTypeDo
	Distinct(cols ...field.Expr) IPaymentTypeDo
	Omit(cols ...field.Expr) IPaymentTypeDo
	Join(table schema.Tabler, on ...field.Expr) IPaymentTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaymentTypeDo
	Group(cols ...field.Expr) IPaymentTypeDo
	Having(conds ...gen.Condition) IPaymentTypeDo
	Limit(limit int) IPaymentTypeDo
	Offset(offset int) IPaymentTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentTypeDo
	Unscoped() IPaymentTypeDo
	Create(values ...*model.PaymentType) error
	CreateInBatches(values []*model.PaymentType, batchSize int) error
	Save(values ...*model.PaymentType) error
	First() (*model.PaymentType, error)
	Take() (*model.PaymentType, error)
	Last() (*model.PaymentType, error)
	Find() ([]*model.PaymentType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentType, err error)
	FindInBatches(result *[]*model.PaymentType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PaymentType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaymentTypeDo
	Assign(attrs ...field.AssignExpr) IPaymentTypeDo
	Joins(fields ...field.RelationField) IPaymentTypeDo
	Preload(fields ...field.RelationField) IPaymentTypeDo
	FirstOrInit() (*model.PaymentType, error)
	FirstOrCreate() (*model.PaymentType, error)
	FindByPage(offset int, limit int) (result []*model.PaymentType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaymentTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paymentTypeDo) Debug() IPaymentTypeDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentTypeDo) WithContext(ctx context.Context) IPaymentTypeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentTypeDo) ReadDB() IPaymentTypeDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentTypeDo) WriteDB() IPaymentTypeDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentTypeDo) Session(config *gorm.Session) IPaymentTypeDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentTypeDo) Clauses(conds ...clause.Expression) IPaymentTypeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentTypeDo) Returning(value interface{}, columns ...string) IPaymentTypeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentTypeDo) Not(conds ...gen.Condition) IPaymentTypeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentTypeDo) Or(conds ...gen.Condition) IPaymentTypeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentTypeDo) Select(conds ...field.Expr) IPaymentTypeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentTypeDo) Where(conds ...gen.Condition) IPaymentTypeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentTypeDo) Order(conds ...field.Expr) IPaymentTypeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentTypeDo) Distinct(cols ...field.Expr) IPaymentTypeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentTypeDo) Omit(cols ...field.Expr) IPaymentTypeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentTypeDo) Join(table schema.Tabler, on ...field.Expr) IPaymentTypeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentTypeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaymentTypeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentTypeDo) Group(cols ...field.Expr) IPaymentTypeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentTypeDo) Having(conds ...gen.Condition) IPaymentTypeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentTypeDo) Limit(limit int) IPaymentTypeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentTypeDo) Offset(offset int) IPaymentTypeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentTypeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentTypeDo) Unscoped() IPaymentTypeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentTypeDo) Create(values ...*model.PaymentType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentTypeDo) CreateInBatches(values []*model.PaymentType, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentTypeDo) Save(values ...*model.PaymentType) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentTypeDo) First() (*model.PaymentType, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentType), nil
	}
}

func (p paymentTypeDo) Take() (*model.PaymentType, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentType), nil
	}
}

func (p paymentTypeDo) Last() (*model.PaymentType, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentType), nil
	}
}

func (p paymentTypeDo) Find() ([]*model.PaymentType, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentType), err
}

func (p paymentTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentType, err error) {
	buf := make([]*model.PaymentType, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentTypeDo) FindInBatches(result *[]*model.PaymentType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentTypeDo) Attrs(attrs ...field.AssignExpr) IPaymentTypeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentTypeDo) Assign(attrs ...field.AssignExpr) IPaymentTypeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentTypeDo) Joins(fields ...field.RelationField) IPaymentTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentTypeDo) Preload(fields ...field.RelationField) IPaymentTypeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentTypeDo) FirstOrInit() (*model.PaymentType, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentType), nil
	}
}

func (p paymentTypeDo) FirstOrCreate() (*model.PaymentType, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentType), nil
	}
}

func (p paymentTypeDo) FindByPage(offset int, limit int) (result []*model.PaymentType, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentTypeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentTypeDo) Delete(models ...*model.PaymentType) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentTypeDo) withDO(do gen.Dao) *paymentTypeDo {
	p.DO = *do.(*gen.DO)
	return p
}
