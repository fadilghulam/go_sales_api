// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go_sales_api/internal/model"
)

func newTransactionSale(db *gorm.DB, opts ...gen.DOOption) transactionSale {
	_transactionSale := transactionSale{}

	_transactionSale.transactionSaleDo.UseDB(db, opts...)
	_transactionSale.transactionSaleDo.UseModel(&model.TransactionSale{})

	tableName := _transactionSale.transactionSaleDo.TableName()
	_transactionSale.ALL = field.NewAsterisk(tableName)
	_transactionSale.ID = field.NewInt64(tableName, "id")
	_transactionSale.SalesmanID = field.NewInt16(tableName, "salesman_id")
	_transactionSale.CustomerID = field.NewInt32(tableName, "customer_id")
	_transactionSale.TransactionDate = field.NewTime(tableName, "transaction_date")
	_transactionSale.Invoice = field.NewString(tableName, "invoice")
	_transactionSale.CreatedAt = field.NewTime(tableName, "created_at")
	_transactionSale.UpdatedAt = field.NewTime(tableName, "updated_at")

	_transactionSale.fillFieldMap()

	return _transactionSale
}

type transactionSale struct {
	transactionSaleDo

	ALL             field.Asterisk
	ID              field.Int64
	SalesmanID      field.Int16
	CustomerID      field.Int32
	TransactionDate field.Time
	Invoice         field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (t transactionSale) Table(newTableName string) *transactionSale {
	t.transactionSaleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionSale) As(alias string) *transactionSale {
	t.transactionSaleDo.DO = *(t.transactionSaleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionSale) updateTableName(table string) *transactionSale {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.SalesmanID = field.NewInt16(table, "salesman_id")
	t.CustomerID = field.NewInt32(table, "customer_id")
	t.TransactionDate = field.NewTime(table, "transaction_date")
	t.Invoice = field.NewString(table, "invoice")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *transactionSale) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionSale) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["salesman_id"] = t.SalesmanID
	t.fieldMap["customer_id"] = t.CustomerID
	t.fieldMap["transaction_date"] = t.TransactionDate
	t.fieldMap["invoice"] = t.Invoice
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t transactionSale) clone(db *gorm.DB) transactionSale {
	t.transactionSaleDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionSale) replaceDB(db *gorm.DB) transactionSale {
	t.transactionSaleDo.ReplaceDB(db)
	return t
}

type transactionSaleDo struct{ gen.DO }

type ITransactionSaleDo interface {
	gen.SubQuery
	Debug() ITransactionSaleDo
	WithContext(ctx context.Context) ITransactionSaleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionSaleDo
	WriteDB() ITransactionSaleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionSaleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionSaleDo
	Not(conds ...gen.Condition) ITransactionSaleDo
	Or(conds ...gen.Condition) ITransactionSaleDo
	Select(conds ...field.Expr) ITransactionSaleDo
	Where(conds ...gen.Condition) ITransactionSaleDo
	Order(conds ...field.Expr) ITransactionSaleDo
	Distinct(cols ...field.Expr) ITransactionSaleDo
	Omit(cols ...field.Expr) ITransactionSaleDo
	Join(table schema.Tabler, on ...field.Expr) ITransactionSaleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionSaleDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionSaleDo
	Group(cols ...field.Expr) ITransactionSaleDo
	Having(conds ...gen.Condition) ITransactionSaleDo
	Limit(limit int) ITransactionSaleDo
	Offset(offset int) ITransactionSaleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionSaleDo
	Unscoped() ITransactionSaleDo
	Create(values ...*model.TransactionSale) error
	CreateInBatches(values []*model.TransactionSale, batchSize int) error
	Save(values ...*model.TransactionSale) error
	First() (*model.TransactionSale, error)
	Take() (*model.TransactionSale, error)
	Last() (*model.TransactionSale, error)
	Find() ([]*model.TransactionSale, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionSale, err error)
	FindInBatches(result *[]*model.TransactionSale, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TransactionSale) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionSaleDo
	Assign(attrs ...field.AssignExpr) ITransactionSaleDo
	Joins(fields ...field.RelationField) ITransactionSaleDo
	Preload(fields ...field.RelationField) ITransactionSaleDo
	FirstOrInit() (*model.TransactionSale, error)
	FirstOrCreate() (*model.TransactionSale, error)
	FindByPage(offset int, limit int) (result []*model.TransactionSale, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionSaleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionSaleDo) Debug() ITransactionSaleDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionSaleDo) WithContext(ctx context.Context) ITransactionSaleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionSaleDo) ReadDB() ITransactionSaleDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionSaleDo) WriteDB() ITransactionSaleDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionSaleDo) Session(config *gorm.Session) ITransactionSaleDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionSaleDo) Clauses(conds ...clause.Expression) ITransactionSaleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionSaleDo) Returning(value interface{}, columns ...string) ITransactionSaleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionSaleDo) Not(conds ...gen.Condition) ITransactionSaleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionSaleDo) Or(conds ...gen.Condition) ITransactionSaleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionSaleDo) Select(conds ...field.Expr) ITransactionSaleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionSaleDo) Where(conds ...gen.Condition) ITransactionSaleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionSaleDo) Order(conds ...field.Expr) ITransactionSaleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionSaleDo) Distinct(cols ...field.Expr) ITransactionSaleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionSaleDo) Omit(cols ...field.Expr) ITransactionSaleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionSaleDo) Join(table schema.Tabler, on ...field.Expr) ITransactionSaleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionSaleDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionSaleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionSaleDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionSaleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionSaleDo) Group(cols ...field.Expr) ITransactionSaleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionSaleDo) Having(conds ...gen.Condition) ITransactionSaleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionSaleDo) Limit(limit int) ITransactionSaleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionSaleDo) Offset(offset int) ITransactionSaleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionSaleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionSaleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionSaleDo) Unscoped() ITransactionSaleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionSaleDo) Create(values ...*model.TransactionSale) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionSaleDo) CreateInBatches(values []*model.TransactionSale, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionSaleDo) Save(values ...*model.TransactionSale) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionSaleDo) First() (*model.TransactionSale, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSale), nil
	}
}

func (t transactionSaleDo) Take() (*model.TransactionSale, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSale), nil
	}
}

func (t transactionSaleDo) Last() (*model.TransactionSale, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSale), nil
	}
}

func (t transactionSaleDo) Find() ([]*model.TransactionSale, error) {
	result, err := t.DO.Find()
	return result.([]*model.TransactionSale), err
}

func (t transactionSaleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionSale, err error) {
	buf := make([]*model.TransactionSale, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionSaleDo) FindInBatches(result *[]*model.TransactionSale, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionSaleDo) Attrs(attrs ...field.AssignExpr) ITransactionSaleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionSaleDo) Assign(attrs ...field.AssignExpr) ITransactionSaleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionSaleDo) Joins(fields ...field.RelationField) ITransactionSaleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionSaleDo) Preload(fields ...field.RelationField) ITransactionSaleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionSaleDo) FirstOrInit() (*model.TransactionSale, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSale), nil
	}
}

func (t transactionSaleDo) FirstOrCreate() (*model.TransactionSale, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSale), nil
	}
}

func (t transactionSaleDo) FindByPage(offset int, limit int) (result []*model.TransactionSale, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionSaleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionSaleDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionSaleDo) Delete(models ...*model.TransactionSale) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionSaleDo) withDO(do gen.Dao) *transactionSaleDo {
	t.DO = *do.(*gen.DO)
	return t
}
