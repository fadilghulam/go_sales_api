// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go_sales_api/internal/model"
)

func newCashier(db *gorm.DB, opts ...gen.DOOption) cashier {
	_cashier := cashier{}

	_cashier.cashierDo.UseDB(db, opts...)
	_cashier.cashierDo.UseModel(&model.Cashiers{})

	tableName := _cashier.cashierDo.TableName()
	_cashier.ALL = field.NewAsterisk(tableName)
	_cashier.ID = field.NewInt64(tableName, "id")
	_cashier.Name = field.NewString(tableName, "name")
	_cashier.Passcode = field.NewString(tableName, "passcode")
	_cashier.CreatedAt = field.NewTime(tableName, "created_at")
	_cashier.DtmUpd = field.NewTime(tableName, "dtm_upd")

	_cashier.fillFieldMap()

	return _cashier
}

type cashier struct {
	cashierDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	Passcode  field.String
	CreatedAt field.Time
	DtmUpd    field.Time

	fieldMap map[string]field.Expr
}

func (c cashier) Table(newTableName string) *cashier {
	c.cashierDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cashier) As(alias string) *cashier {
	c.cashierDo.DO = *(c.cashierDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cashier) updateTableName(table string) *cashier {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Name = field.NewString(table, "name")
	c.Passcode = field.NewString(table, "passcode")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.DtmUpd = field.NewTime(table, "dtm_upd")

	c.fillFieldMap()

	return c
}

func (c *cashier) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cashier) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
	c.fieldMap["passcode"] = c.Passcode
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["dtm_upd"] = c.DtmUpd
}

func (c cashier) clone(db *gorm.DB) cashier {
	c.cashierDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cashier) replaceDB(db *gorm.DB) cashier {
	c.cashierDo.ReplaceDB(db)
	return c
}

type cashierDo struct{ gen.DO }

type ICashierDo interface {
	gen.SubQuery
	Debug() ICashierDo
	WithContext(ctx context.Context) ICashierDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICashierDo
	WriteDB() ICashierDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICashierDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICashierDo
	Not(conds ...gen.Condition) ICashierDo
	Or(conds ...gen.Condition) ICashierDo
	Select(conds ...field.Expr) ICashierDo
	Where(conds ...gen.Condition) ICashierDo
	Order(conds ...field.Expr) ICashierDo
	Distinct(cols ...field.Expr) ICashierDo
	Omit(cols ...field.Expr) ICashierDo
	Join(table schema.Tabler, on ...field.Expr) ICashierDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICashierDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICashierDo
	Group(cols ...field.Expr) ICashierDo
	Having(conds ...gen.Condition) ICashierDo
	Limit(limit int) ICashierDo
	Offset(offset int) ICashierDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICashierDo
	Unscoped() ICashierDo
	Create(values ...*model.Cashiers) error
	CreateInBatches(values []*model.Cashiers, batchSize int) error
	Save(values ...*model.Cashiers) error
	First() (*model.Cashiers, error)
	Take() (*model.Cashiers, error)
	Last() (*model.Cashiers, error)
	Find() ([]*model.Cashiers, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cashiers, err error)
	FindInBatches(result *[]*model.Cashiers, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Cashiers) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICashierDo
	Assign(attrs ...field.AssignExpr) ICashierDo
	Joins(fields ...field.RelationField) ICashierDo
	Preload(fields ...field.RelationField) ICashierDo
	FirstOrInit() (*model.Cashiers, error)
	FirstOrCreate() (*model.Cashiers, error)
	FindByPage(offset int, limit int) (result []*model.Cashiers, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICashierDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cashierDo) Debug() ICashierDo {
	return c.withDO(c.DO.Debug())
}

func (c cashierDo) WithContext(ctx context.Context) ICashierDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cashierDo) ReadDB() ICashierDo {
	return c.Clauses(dbresolver.Read)
}

func (c cashierDo) WriteDB() ICashierDo {
	return c.Clauses(dbresolver.Write)
}

func (c cashierDo) Session(config *gorm.Session) ICashierDo {
	return c.withDO(c.DO.Session(config))
}

func (c cashierDo) Clauses(conds ...clause.Expression) ICashierDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cashierDo) Returning(value interface{}, columns ...string) ICashierDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cashierDo) Not(conds ...gen.Condition) ICashierDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cashierDo) Or(conds ...gen.Condition) ICashierDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cashierDo) Select(conds ...field.Expr) ICashierDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cashierDo) Where(conds ...gen.Condition) ICashierDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cashierDo) Order(conds ...field.Expr) ICashierDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cashierDo) Distinct(cols ...field.Expr) ICashierDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cashierDo) Omit(cols ...field.Expr) ICashierDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cashierDo) Join(table schema.Tabler, on ...field.Expr) ICashierDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cashierDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICashierDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cashierDo) RightJoin(table schema.Tabler, on ...field.Expr) ICashierDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cashierDo) Group(cols ...field.Expr) ICashierDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cashierDo) Having(conds ...gen.Condition) ICashierDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cashierDo) Limit(limit int) ICashierDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cashierDo) Offset(offset int) ICashierDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cashierDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICashierDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cashierDo) Unscoped() ICashierDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cashierDo) Create(values ...*model.Cashiers) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cashierDo) CreateInBatches(values []*model.Cashiers, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cashierDo) Save(values ...*model.Cashiers) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cashierDo) First() (*model.Cashiers, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cashiers), nil
	}
}

func (c cashierDo) Take() (*model.Cashiers, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cashiers), nil
	}
}

func (c cashierDo) Last() (*model.Cashiers, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cashiers), nil
	}
}

func (c cashierDo) Find() ([]*model.Cashiers, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cashiers), err
}

func (c cashierDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cashiers, err error) {
	buf := make([]*model.Cashiers, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cashierDo) FindInBatches(result *[]*model.Cashiers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cashierDo) Attrs(attrs ...field.AssignExpr) ICashierDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cashierDo) Assign(attrs ...field.AssignExpr) ICashierDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cashierDo) Joins(fields ...field.RelationField) ICashierDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cashierDo) Preload(fields ...field.RelationField) ICashierDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cashierDo) FirstOrInit() (*model.Cashiers, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cashiers), nil
	}
}

func (c cashierDo) FirstOrCreate() (*model.Cashiers, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cashiers), nil
	}
}

func (c cashierDo) FindByPage(offset int, limit int) (result []*model.Cashiers, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cashierDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cashierDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cashierDo) Delete(models ...*model.Cashiers) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cashierDo) withDO(do gen.Dao) *cashierDo {
	c.DO = *do.(*gen.DO)
	return c
}
