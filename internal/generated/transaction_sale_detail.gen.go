// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go_sales_api/internal/model"
)

func newTransactionSaleDetail(db *gorm.DB, opts ...gen.DOOption) transactionSaleDetail {
	_transactionSaleDetail := transactionSaleDetail{}

	_transactionSaleDetail.transactionSaleDetailDo.UseDB(db, opts...)
	_transactionSaleDetail.transactionSaleDetailDo.UseModel(&model.TransactionSaleDetail{})

	tableName := _transactionSaleDetail.transactionSaleDetailDo.TableName()
	_transactionSaleDetail.ALL = field.NewAsterisk(tableName)
	_transactionSaleDetail.ID = field.NewInt64(tableName, "id")
	_transactionSaleDetail.TransactionID = field.NewInt64(tableName, "transaction_id")
	_transactionSaleDetail.ProductID = field.NewInt16(tableName, "product_id")
	_transactionSaleDetail.Price = field.NewInt32(tableName, "price")
	_transactionSaleDetail.Qty = field.NewInt32(tableName, "qty")
	_transactionSaleDetail.Discount = field.NewInt32(tableName, "discount")
	_transactionSaleDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_transactionSaleDetail.UpdatedAt = field.NewTime(tableName, "updated_at")

	_transactionSaleDetail.fillFieldMap()

	return _transactionSaleDetail
}

type transactionSaleDetail struct {
	transactionSaleDetailDo

	ALL           field.Asterisk
	ID            field.Int64
	TransactionID field.Int64
	ProductID     field.Int16
	Price         field.Int32
	Qty           field.Int32
	Discount      field.Int32
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t transactionSaleDetail) Table(newTableName string) *transactionSaleDetail {
	t.transactionSaleDetailDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionSaleDetail) As(alias string) *transactionSaleDetail {
	t.transactionSaleDetailDo.DO = *(t.transactionSaleDetailDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionSaleDetail) updateTableName(table string) *transactionSaleDetail {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.TransactionID = field.NewInt64(table, "transaction_id")
	t.ProductID = field.NewInt16(table, "product_id")
	t.Price = field.NewInt32(table, "price")
	t.Qty = field.NewInt32(table, "qty")
	t.Discount = field.NewInt32(table, "discount")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *transactionSaleDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionSaleDetail) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.ID
	t.fieldMap["transaction_id"] = t.TransactionID
	t.fieldMap["product_id"] = t.ProductID
	t.fieldMap["price"] = t.Price
	t.fieldMap["qty"] = t.Qty
	t.fieldMap["discount"] = t.Discount
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t transactionSaleDetail) clone(db *gorm.DB) transactionSaleDetail {
	t.transactionSaleDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionSaleDetail) replaceDB(db *gorm.DB) transactionSaleDetail {
	t.transactionSaleDetailDo.ReplaceDB(db)
	return t
}

type transactionSaleDetailDo struct{ gen.DO }

type ITransactionSaleDetailDo interface {
	gen.SubQuery
	Debug() ITransactionSaleDetailDo
	WithContext(ctx context.Context) ITransactionSaleDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionSaleDetailDo
	WriteDB() ITransactionSaleDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionSaleDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionSaleDetailDo
	Not(conds ...gen.Condition) ITransactionSaleDetailDo
	Or(conds ...gen.Condition) ITransactionSaleDetailDo
	Select(conds ...field.Expr) ITransactionSaleDetailDo
	Where(conds ...gen.Condition) ITransactionSaleDetailDo
	Order(conds ...field.Expr) ITransactionSaleDetailDo
	Distinct(cols ...field.Expr) ITransactionSaleDetailDo
	Omit(cols ...field.Expr) ITransactionSaleDetailDo
	Join(table schema.Tabler, on ...field.Expr) ITransactionSaleDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionSaleDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionSaleDetailDo
	Group(cols ...field.Expr) ITransactionSaleDetailDo
	Having(conds ...gen.Condition) ITransactionSaleDetailDo
	Limit(limit int) ITransactionSaleDetailDo
	Offset(offset int) ITransactionSaleDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionSaleDetailDo
	Unscoped() ITransactionSaleDetailDo
	Create(values ...*model.TransactionSaleDetail) error
	CreateInBatches(values []*model.TransactionSaleDetail, batchSize int) error
	Save(values ...*model.TransactionSaleDetail) error
	First() (*model.TransactionSaleDetail, error)
	Take() (*model.TransactionSaleDetail, error)
	Last() (*model.TransactionSaleDetail, error)
	Find() ([]*model.TransactionSaleDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionSaleDetail, err error)
	FindInBatches(result *[]*model.TransactionSaleDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TransactionSaleDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionSaleDetailDo
	Assign(attrs ...field.AssignExpr) ITransactionSaleDetailDo
	Joins(fields ...field.RelationField) ITransactionSaleDetailDo
	Preload(fields ...field.RelationField) ITransactionSaleDetailDo
	FirstOrInit() (*model.TransactionSaleDetail, error)
	FirstOrCreate() (*model.TransactionSaleDetail, error)
	FindByPage(offset int, limit int) (result []*model.TransactionSaleDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionSaleDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionSaleDetailDo) Debug() ITransactionSaleDetailDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionSaleDetailDo) WithContext(ctx context.Context) ITransactionSaleDetailDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionSaleDetailDo) ReadDB() ITransactionSaleDetailDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionSaleDetailDo) WriteDB() ITransactionSaleDetailDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionSaleDetailDo) Session(config *gorm.Session) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionSaleDetailDo) Clauses(conds ...clause.Expression) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionSaleDetailDo) Returning(value interface{}, columns ...string) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionSaleDetailDo) Not(conds ...gen.Condition) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionSaleDetailDo) Or(conds ...gen.Condition) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionSaleDetailDo) Select(conds ...field.Expr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionSaleDetailDo) Where(conds ...gen.Condition) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionSaleDetailDo) Order(conds ...field.Expr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionSaleDetailDo) Distinct(cols ...field.Expr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionSaleDetailDo) Omit(cols ...field.Expr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionSaleDetailDo) Join(table schema.Tabler, on ...field.Expr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionSaleDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionSaleDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionSaleDetailDo) Group(cols ...field.Expr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionSaleDetailDo) Having(conds ...gen.Condition) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionSaleDetailDo) Limit(limit int) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionSaleDetailDo) Offset(offset int) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionSaleDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionSaleDetailDo) Unscoped() ITransactionSaleDetailDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionSaleDetailDo) Create(values ...*model.TransactionSaleDetail) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionSaleDetailDo) CreateInBatches(values []*model.TransactionSaleDetail, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionSaleDetailDo) Save(values ...*model.TransactionSaleDetail) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionSaleDetailDo) First() (*model.TransactionSaleDetail, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSaleDetail), nil
	}
}

func (t transactionSaleDetailDo) Take() (*model.TransactionSaleDetail, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSaleDetail), nil
	}
}

func (t transactionSaleDetailDo) Last() (*model.TransactionSaleDetail, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSaleDetail), nil
	}
}

func (t transactionSaleDetailDo) Find() ([]*model.TransactionSaleDetail, error) {
	result, err := t.DO.Find()
	return result.([]*model.TransactionSaleDetail), err
}

func (t transactionSaleDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TransactionSaleDetail, err error) {
	buf := make([]*model.TransactionSaleDetail, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionSaleDetailDo) FindInBatches(result *[]*model.TransactionSaleDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionSaleDetailDo) Attrs(attrs ...field.AssignExpr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionSaleDetailDo) Assign(attrs ...field.AssignExpr) ITransactionSaleDetailDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionSaleDetailDo) Joins(fields ...field.RelationField) ITransactionSaleDetailDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionSaleDetailDo) Preload(fields ...field.RelationField) ITransactionSaleDetailDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionSaleDetailDo) FirstOrInit() (*model.TransactionSaleDetail, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSaleDetail), nil
	}
}

func (t transactionSaleDetailDo) FirstOrCreate() (*model.TransactionSaleDetail, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TransactionSaleDetail), nil
	}
}

func (t transactionSaleDetailDo) FindByPage(offset int, limit int) (result []*model.TransactionSaleDetail, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionSaleDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionSaleDetailDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionSaleDetailDo) Delete(models ...*model.TransactionSaleDetail) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionSaleDetailDo) withDO(do gen.Dao) *transactionSaleDetailDo {
	t.DO = *do.(*gen.DO)
	return t
}
