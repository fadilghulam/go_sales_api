// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package generated

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	Cashier     *cashier
	Category    *category
	Discount    *discount
	Order       *order
	Payment     *payment
	PaymentType *paymentType
	Product     *product
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Cashier = &Q.Cashier
	Category = &Q.Category
	Discount = &Q.Discount
	Order = &Q.Order
	Payment = &Q.Payment
	PaymentType = &Q.PaymentType
	Product = &Q.Product
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		Cashier:     newCashier(db, opts...),
		Category:    newCategory(db, opts...),
		Discount:    newDiscount(db, opts...),
		Order:       newOrder(db, opts...),
		Payment:     newPayment(db, opts...),
		PaymentType: newPaymentType(db, opts...),
		Product:     newProduct(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Cashier     cashier
	Category    category
	Discount    discount
	Order       order
	Payment     payment
	PaymentType paymentType
	Product     product
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Cashier:     q.Cashier.clone(db),
		Category:    q.Category.clone(db),
		Discount:    q.Discount.clone(db),
		Order:       q.Order.clone(db),
		Payment:     q.Payment.clone(db),
		PaymentType: q.PaymentType.clone(db),
		Product:     q.Product.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Cashier:     q.Cashier.replaceDB(db),
		Category:    q.Category.replaceDB(db),
		Discount:    q.Discount.replaceDB(db),
		Order:       q.Order.replaceDB(db),
		Payment:     q.Payment.replaceDB(db),
		PaymentType: q.PaymentType.replaceDB(db),
		Product:     q.Product.replaceDB(db),
	}
}

type queryCtx struct {
	Cashier     ICashierDo
	Category    ICategoryDo
	Discount    IDiscountDo
	Order       IOrderDo
	Payment     IPaymentDo
	PaymentType IPaymentTypeDo
	Product     IProductDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Cashier:     q.Cashier.WithContext(ctx),
		Category:    q.Category.WithContext(ctx),
		Discount:    q.Discount.WithContext(ctx),
		Order:       q.Order.WithContext(ctx),
		Payment:     q.Payment.WithContext(ctx),
		PaymentType: q.PaymentType.WithContext(ctx),
		Product:     q.Product.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
